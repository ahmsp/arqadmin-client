/*
 * File: app/view/documental/ContainerViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ArqAdmin.view.documental.DocumentalViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.documental',

    control: {
        "gridpanel": {
            select: 'onGridpanelSelect'
        },
        "#classificFieldset combobox": {
            select: 'onCascadingComboSelect',
            focus: 'onCascadingComboFocus'
        }
    },

    onGridpanelSelect: function(rowmodel, record, index, eOpts) {
        // selects record in both grids
        var refs = this.getReferences();
        refs.table.setSelection(record);
        refs.list.setSelection(record);

        //scroll grid to selected record
        // list.getView().focusRow(index);
        // list.getView().scrollRowIntoView(index);

        // Set selected record
        this.getViewModel().set('record', record);

        // Show details
        this.showView('details');
    },

    onCascadingComboSelect: function(combo, records, eOpts) {
        var me = this,
            combosRefs = this.lookupReference('classificFieldset').getReferences();

        // clear all next combos
        var start = false;
        Ext.Object.each(combosRefs, function(key, cb, obj) {

            // check if this is next combo
            if (cb === combo.next()) {
                start = true;
            }

            if (start === true) {
                cb.clearValue();
            }
        });

        me.changeDisableCascadingCombos();
        me.setAcervoComboValue();

    },

    onCascadingComboFocus: function(component, event, eOpts) {
        var combo = component;

        if (combo.reference == 'fundoCombo') {
            return;
        }

        var prevCombo = combo.prev();
        var filterProperty = prevCombo.name;
        var comboStore = combo.getStore();

        comboStore.clearFilter();

        // filter the combo based in parent cobo value (id)
        comboStore.filterBy(function(record){
            return record.get(filterProperty) === prevCombo.value;
        });

    },

    showView: function(view) {
        var layout = this.getReferences().display.getLayout();
        layout.setActiveItem(this.lookupReference(view));
    },

    /*
        * Change the disabled state of cascading combos,
        * based on defined values
    */
    changeDisableCascadingCombos: function() {
        var combos = this.lookupReference('classificFieldset').getReferences();

        var lastSelectedCombo = null;
        Ext.Object.each(combos, function(key, combo, obj) {

            if (!Ext.isEmpty(combo.value)){
                combo.enable();
                lastSelectedCombo = combo;
            } else if (combo !== combos.fundoCombo){
                combo.disable();
            }
        });
        if (lastSelectedCombo){
            lastSelectedCombo.next().enable();
        }
    },

    /* Clean the filters of cascading combos */
    clearFilterCascadingCombos: function() {
        var combos = this.lookupReference('classificFieldset').getReferences();

        Ext.Object.each(combos, function(key, combo, obj) {
            combo.getStore().clearFilter();
        });
    },

    formLoadRecord: function(record) {
        var me = this,
            formPanel = me.getReferences().form,
            form = formPanel.getForm();

        // Clear form
        form.reset();

        me.clearFilterCascadingCombos();
        form.loadRecord(record);
        me.changeDisableCascadingCombos();
    },

    /*
        * Checks if the combination of "classificação" corresponds to an existing "acervo"
        * and sets the corresponding value for the combo
    */
    setAcervoComboValue: function() {
        var me = this,
            acervoCombo = me.lookupReference('acervoCombo'),
            refs = me.lookupReference('classificFieldset').getReferences();

        acervoCombo.clearValue();

        // check if the combination exists in acervoCombo
        var recordIndex = acervoCombo.getStore().findBy(
            function(record, id){

                if(refs.fundoCombo.value === record.get('fundoId') &&
                   refs.subfundoCombo.value === record.get('subfundoId') &&
                   refs.grupoCombo.value === record.get('grupoId') &&
                   refs.subgrupoCombo.value === record.get('subgrupoId') &&
                   refs.serieCombo.value === record.get('serieId') &&
                   refs.subserieCombo.value === record.get('subserieId') &&
                   refs.dossieCombo.value === record.get('dossieId')) {
                    return true;
                }
                return false;
            }
        );

        if(recordIndex != -1){
            // set combo value by index
            acervoCombo.setValue(acervoCombo.getStore().getAt(recordIndex).get(acervoCombo.valueField));
        }
    },

    add: function(button, e, eOpts) {
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            newRecord = Ext.create('model.documento');
        newRecord.set('id', null);

        // Set record
        this.formLoadRecord(newRecord);

        // Set title
        formPanel.setTitle('Adicionar Documento');

        // Show form
        this.showView('form');

    },

    edit: function(button, e, eOpts) {
        var me = this,
            record = me.getViewModel().get('record');

        me.formLoadRecord(record);

        me.getReferences().display.setTitle('Editar Documento');

        me.showView('form');
    },

    remove: function(button, e, eOpts) {
        var me = this;

        // Ask user to confirm this action
        Ext.Msg.confirm('Confirm Delete', 'Você tem certeza que deseja excluir este registro?', function(result) {

            // User confirmed yes
            if (result == 'yes') {

                var record = me.getViewModel().get('record'),
                    store = Ext.StoreManager.lookup('Documentos');

                // Delete record from store
                store.remove(record);

                // Hide display
                me.showView('selectMessage');

            }

        });
    },

    save: function(button, e, eOpts) {
        var form = this.getReferences().form.getForm(),
            record = form.getRecord(),
            store = Ext.StoreManager.lookup('Documentos');

        if (form.isValid()) {

            // Update associated record with values
            form.updateRecord();

            // Add to store if new record
            if (record.phantom) {
                record.set('id', null);
                store.add(record);
            }

            store.sync({
                success: function(){
                    //             message = 'Registro adicionado com sucesso!';
                    //             form.down('textfield#fieldNome').focus(true, 180);
                    store.load();
                    //             RegSepult.util.Alert.msg(message, '');

                    //console.log("success!!");
                },
                failure: function(){
                    //console.log("failed...");
                },
                callback: function(){
                    //console.log("calling callback");
                },
                scope: this
            });

            // Commit changes
            //     store.commitChanges();

            //     console.log(me);

            // Display record
            this.onGridpanelSelect(this, record);

        }
    },

    cancelEdit: function(button, e, eOpts) {
        // Show details
        this.showView('details');
    },

    onAcervoComboSelect: function(combo, records, eOpts) {
        var me = this,
            formPanel = me.getReferences().form,
            form = formPanel.getForm(),
            combosRefs = this.lookupReference('classificFieldset').getReferences(),
            values = records[0].getData();

        delete values.id;

        me.clearFilterCascadingCombos();
        form.setValues(values);
        me.changeDisableCascadingCombos();

        me.lookupReference('especiedocumentalCombo').focus(true, 180);
    }

});
